import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.ItemEvent;
import java.time.LocalDate;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ConnectToDatabase {



    static final String DB_URL = "jdbc:mysql://localhost:/BD?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    static final String USER = "root";
    static final String PASS = "poop1234";
    public int numOfBooks;

    public static final String [] pageList = {"Entire Directory", "Read", "To Be Read", "Currently Reading"};
    public static final JComboBox directoryPages = new JComboBox(pageList);
    public static TableRowSorter<DefaultTableModel> sorter;
    public DefaultTableModel model;

    public void insertToDB(){

        try{
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String toSQLBook = GUI.enterBook.getText();
        String toSQLAuthor = GUI.enterAuthor.getText();
        String toSQLStatus = "";
        String toSQLDate = "N/A";
        int pageCountInt =  Integer.parseInt(GUI.enterPageCount.getText());
        int toSQLPageCount = pageCountInt;

            //Get date of inputted book
            if (GUI.readButton.isSelected()) {
                toSQLStatus+= GUI.readButton.getText() + " ";
                LocalDate currentDate = LocalDate.now();
                int currentMonth = currentDate.getMonthValue();
                int currentDay = currentDate.getDayOfMonth();
                int currentYear = currentDate.getYear();

                toSQLDate = currentMonth + "/" + currentDay + "/" + currentYear;

            }if (GUI.readingButton.isSelected()) {
                toSQLStatus+= GUI.readingButton.getText() + " ";
            }if (GUI.tbrButton.isSelected()) {
                toSQLStatus+=  "TBR";
            }

        Statement inputData = conn.createStatement();
        inputData.executeUpdate("insert INTO BD (Title, Author, Status, Completed, Pages) values ('" + toSQLBook + "', '" + toSQLAuthor + "', '"+toSQLStatus+"', '" +toSQLDate+ "', '" + toSQLPageCount + "')");


        inputData.close();
        conn.close();

           }catch (ClassNotFoundException e1) {
            e1.printStackTrace();
           }catch (SQLException e1) {
            e1.printStackTrace();
           }
    }

    public void openDirectory() {

            Connection conn = null;
            Statement stmt = null;
            try{
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection(DB_URL,USER,PASS);
                stmt = conn.createStatement();
                String showData;
                showData = "SELECT Title, Author, Status, Completed, Pages FROM BD";
                ResultSet rs = stmt.executeQuery(showData);

                JFrame f = new JFrame("Book Directory");
                f.setSize(700, 500);
                JTable table = new JTable(GUI.buildTableModel(rs));

                JScrollPane sp = new JScrollPane(table);
                table.setFillsViewportHeight(true);


                numOfBooks = table.getRowCount();
                System.out.println("Books in Directory: " + numOfBooks);

                JLabel bookCountAll = new JLabel("Books in Directory: " + numOfBooks);

                f.getContentPane().setLayout(new BorderLayout());
                f.getContentPane().add(directoryPages, BorderLayout.PAGE_START);

                f.getContentPane().add(bookCountAll, BorderLayout.PAGE_END);
                bookCountAll.setHorizontalAlignment(bookCountAll.CENTER);


                f.getContentPane().add(sp, BorderLayout.CENTER );


                f.setLocationRelativeTo(null);
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                f.setVisible(true);


                //Set column width
                TableColumnModel columnModel = table.getColumnModel();
                columnModel.getColumn(0).setPreferredWidth(270);
                columnModel.getColumn(1).setPreferredWidth(90);
                table.getTableHeader().setReorderingAllowed(false);


                TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(table.getModel());
                table.setRowSorter(sorter);

                List <RowSorter.SortKey> sortKeys = new ArrayList<>(100);
                sortKeys.add(new RowSorter.SortKey(3, SortOrder.ASCENDING));
                sorter.setSortKeys(sortKeys);


                rs.close();
                stmt.close();
                conn.close();

            }catch(SQLException se){
                se.printStackTrace();
            } catch (ClassNotFoundException e1) {
                e1.printStackTrace();
            } finally{
                try{
                    if(stmt!=null)
                        stmt.close();
                }catch(SQLException se2){
                }// nothing we can do
                try{
                    if(conn!=null)
                        conn.close();
                }catch(SQLException se){
                    se.printStackTrace();
                }

                }
            }
    }



