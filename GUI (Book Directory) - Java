import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.*;
import java.time.*;
import java.time.temporal.ChronoUnit;
import java.sql.*;


public class GUI implements ActionListener {

    public static JTextField enterBook;
    public static JTextField enterAuthor;
    public static JTextField enterPageCount;

    private static JLabel bookLabel;
    private static JLabel authorLabel;
    private static JLabel pageCountLabel;
    public static int pageCountInt;
    private static JButton enter;
    private static JButton cancel;
    public static JCheckBox readButton, readingButton, tbrButton;
    private static JButton openDirectory;
    private static JLabel weekLabel;



    //Need to figure out where you would like to store book counts

    public static void main(String[] args){
        //Elements of GUI
        JFrame frame = new JFrame();
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        panel.setLayout(null);

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(panel);

        frame.setSize(500, 500);
        frame.setTitle("100 Books in 100 Weeks");


        //Book Title and Author Input
        //Book Title Label and Text Field
        bookLabel = new JLabel("Enter Book Name: ");
        bookLabel.setBounds(10, 20, 175, 40);
        panel.add(bookLabel);


        enterBook = new JTextField(25);
        enterBook.setBounds(150, 27, 250, 25);

        panel.add(enterBook);


        //Author Label and Text Field
        authorLabel = new JLabel("Enter Author's Name: ");
        authorLabel.setBounds(10, 50, 175, 40);
        panel.add(authorLabel);


        enterAuthor = new JTextField(25);
        enterAuthor.setBounds(150, 58, 250, 25);
        panel.add(enterAuthor);

        //Page Count  Label and Text Field
        pageCountLabel = new JLabel("Enter Page Count: ");
        pageCountLabel.setBounds(10, 80, 175, 40);
        panel.add(pageCountLabel);


        enterPageCount = new JTextField(25);
        enterPageCount.setBounds(150, 89, 250, 25);
        panel.add(enterPageCount);


        // BUTTONS
        //Enter button
        enter = new JButton("Enter");
        enter.setBounds(180, 200, 80, 25);
        enter.addActionListener(new GUI());

        frame.getRootPane().setDefaultButton(enter);
        //enter.setMnemonic(KeyEvent.VK_ENTER); - not currently working

        //Cancel button
        cancel = new JButton("Cancel");
        cancel.setBounds(280, 200, 80, 25);
        cancel.addActionListener(new GUI());

        //Open directory button
        openDirectory = new JButton("Open Directory");
        openDirectory.setBounds(120,400,300,25);
        openDirectory.addActionListener(new GUI());

        //Check Boxes
        event e = new event();

        readButton = new JCheckBox("Read");
        readButton.setBounds(60,115,75,50);
        readButton.addItemListener(e);

        readingButton = new JCheckBox("Reading");
        readingButton.setBounds(200,115,100,50);
        readingButton.addItemListener(e);

        tbrButton = new JCheckBox("To Be Read");
        tbrButton.setBounds(340,115,100,50);
        tbrButton.addItemListener(e);

        //Get current week
        LocalDate startDate = LocalDate.of(2020, Month.AUGUST, 1);
        LocalDate currentDate = LocalDate.now();

        long weeksElapsed = ChronoUnit.WEEKS.between(startDate, currentDate);
        long currentWeek = weeksElapsed + 1;

        weekLabel = new JLabel("Week: " + currentWeek);
        weekLabel.setBounds(40, 430, 300, 25);
        weekLabel.setFont(new Font("Calibri", Font.PLAIN,20));

        panel.add(enter);
        panel.add(cancel);
        panel.add(readButton);
        panel.add(readingButton);
        panel.add(tbrButton);
        panel.add(openDirectory);
        panel.add(weekLabel);

        frame.setVisible(true);


    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == enter) {
            ConnectToDatabase insert = new ConnectToDatabase();
            insert.insertToDB();
        }

        //Clear text fields
        enterBook.setText("");
        enterAuthor.setText("");
        enterPageCount.setText("");

        //Uncheck boxes
        readButton.setSelected(false);
        readingButton.setSelected(false);
        tbrButton.setSelected(false);

        if(e.getSource() == openDirectory){
            ConnectToDatabase open = new ConnectToDatabase();
            open.openDirectory();
        }
        if (e.getSource() == cancel) {
            System.exit(0);
        }
    }


    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {

        ResultSetMetaData metaData = rs.getMetaData();

        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
       return new DefaultTableModel(data, columnNames);
    }



    public static class event implements ItemListener{

        public void itemStateChanged(ItemEvent e){

            if(readButton.isSelected()) {
                readingButton.setSelected(false);
                tbrButton.setSelected(false);

            }if(readingButton.isSelected()) {
                readButton.setSelected(false);
                tbrButton.setSelected(false);

            }if (tbrButton.isSelected()) {
                readingButton.setSelected(false);
                readButton.setSelected(false);
                }
        }
    }
}


